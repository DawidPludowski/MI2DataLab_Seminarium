apiVersion: v1
kind: ConfigMap
metadata:
  name: example-3-scripts
data:
  script.R: |
    install.packages(c("remotes", "ranger"))
    remotes::install_github("ModelOriented/DALEX")
    remotes::install_github("ModelOriented/xai2shiny")
    library("xai2shiny")
    library("ranger")
    library("DALEX")
    # Creating ML models
    model_rf <- ranger(survived ~ .,
                       data = titanic_imputed,
                       classification = TRUE, 
                       probability = TRUE)
    model_glm <- glm(survived ~ .,
                     data = titanic_imputed,
                     family = "binomial")
    
    # Creating DALEX explainers
    explainer_rf <- explain(model_rf,
                         data = titanic_imputed[,-8],
                         y = titanic_imputed$survived)
    
    explainer_glm <- explain(model_glm,
                         data = titanic_imputed[,-8],
                         y = titanic_imputed$survived)
    xai2shiny::xai2shiny(explainer_glm, explainer_rf,
                     directory = '/shiny',
                     selected_variables = c('gender', 'age'),
                     run = FALSE)
    shiny::runApp('/shiny', port=8080, host='0.0.0.0')
---
apiVersion: v1
kind: Pod
metadata:
  name: example-3
  labels:
    app: example-3
spec:
  containers:
  - name: example
    image: rocker/r-ver
    command: ['sh', '-c', 'Rscript /scripts/script.R']
    resources:
      requests:
        memory: 500M
        cpu: 1
      limits:
        memory: 2000M
        cpu: 4
    volumeMounts:
    - name: example-3-scripts
      mountPath: /scripts
  automountServiceAccountToken: false
  restartPolicy: OnFailure
  volumes:
  - name: example-3-scripts
    configMap:
      name: example-3-scripts
---
apiVersion: v1
kind: Service
metadata:
  name: example-3-shiny
  annotations:
    metallb.universe.tf/allow-shared-ip: "default"
spec:
  type: LoadBalancer
  selector:
    app: example-3
  ports:
    - protocol: TCP
      port: 21212
      targetPort: 8080
---
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-shiny
spec:
  order: 140
  selector: app == 'example-3'
  types:
  - Ingress
  ingress:
  - action: Allow
    protocol: TCP
    destination:
      ports:
      - 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: example-3
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
    - host: user-<put your username there>-demo.mi2.ai
      http:
        paths:
        - pathType: Prefix
          path: "/"
          backend:
            service:
              name: example-3-shiny
              port:
                number: 8080
